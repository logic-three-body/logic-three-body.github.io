<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://logic-three-body.github.io/</id>
    <title>Gridea</title>
    <updated>2021-07-12T04:13:33.499Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://logic-three-body.github.io/"/>
    <link rel="self" href="https://logic-three-body.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://logic-three-body.github.io/images/avatar.png</logo>
    <icon>https://logic-three-body.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[百人计划->3.4 延迟渲染]]></title>
        <id>https://logic-three-body.github.io/post/bai-ren-ji-hua-greater34-yan-chi-xuan-ran/</id>
        <link href="https://logic-three-body.github.io/post/bai-ren-ji-hua-greater34-yan-chi-xuan-ran/">
        </link>
        <updated>2021-07-10T16:18:53.000Z</updated>
        <content type="html"><![CDATA[<h1 id="图形技术基础">图形技术基础</h1>
<h2 id="34-延迟渲染">3.4 延迟渲染</h2>
<p>参考教程：<a href="https://www.bilibili.com/video/BV1244y1i7oV?p=2">here</a></p>
<p>参考笔记：<a href="https://zhuanlan.zhihu.com/p/386760314">add1</a> <a href="https://www.bilibili.com/read/cv12025746">add2</a></p>
<h3 id="延迟渲染理论理解">延迟渲染理论理解</h3>
<h4 id="与前向渲染管线流程的对比">与前向渲染管线流程的对比</h4>
<h5 id="前向渲染流程">前向渲染流程</h5>
<p>渲染场景：一个球体 一个正方体 4个光源【聚光灯】（红 紫 橙 红）</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/07/06/Hb2AXVZWu4JwycK.png" alt="scene" loading="lazy"></figure>
<p>锁定我们即将渲染的物体</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/07/06/PhHYwNJp3UX2ijM.png" alt="renderObject" loading="lazy"></figure>
<p>执行渲染流程 此时渲染管线共执行4次pass，即对应四个光源 ；灯光直接在片元着色器中计算并叠加至最终结果</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/07/06/K2DVrJvZ7jd9IPo.png" alt="image-20210706201948380" loading="lazy"></figure>
<p>（图中灯光计算参考文章：<a href="https://zhuanlan.zhihu.com/p/54694743">游戏引擎中的光照算法</a>）</p>
<p>例子运用四个光源，利用图中算法，需要4x2=8次遍历，随着光源和物体数目增多，计算量也会迅速增大（在实际操作中还需处理深度等其他数据信息，时间复杂度可能会剧烈增加）</p>
<h5 id="延迟渲染流程">延迟渲染流程</h5>
<p>为弥补上述渲染流程对于大量光源的计算问题，延迟渲染采取两步操作（两个pass）以减小灯光计算量</p>
<p>第一次pass其不进行灯光计算，将可见像素信息（例如深度、法线、基本颜色）输入至GBuffer（可以理解为先将渲染信息保存到一张纹理）</p>
<p>第二次pass，利用GBuffer储存的信息（即已知的可见像素）与光线进行计算</p>
<p>综上所述，延迟渲染将物体和灯光分开计算，即使灯光数量很多，最后实际仅与GBuffer（理解为若干张纹理）进行计算，极大简化了计算流程（我粗浅地理解为解耦）</p>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/07/06/SbmYkarDisdpOBf.png" alt="Defer Render" loading="lazy"></figure>
<p>（图中灯光计算参考文章：<a href="https://zhuanlan.zhihu.com/p/54694743">游戏引擎中的光照算法</a>）</p>
<h3 id="优点vs缺点">优点vs缺点</h3>
<p>经过比较，可以看出延迟渲染针对多光源可以极大减少时间复杂度，但同时这是用空间换时间的做法，为了更精确的渲染结果，GBuffer需要储存的信息会更多，显存带宽也会增加更多。</p>
<p>GBuffer提前计算了很多信息，例如深度，这对于后处理等屏幕空间的操作是意外之喜，但由于GBuffer信息是固定的，即已经是经过光栅化的结果，则不能利用MSAA进行超采样抗锯齿</p>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/07/06/cNnZCmyeOx4fquH.png" alt="image-20210706210808800" loading="lazy"></figure>
<p>推荐阅读：<a href="https://www.zhihu.com/question/20236638/answer/44821615">FXAA、FSAA与MSAA有什么区别 -文刀秋二</a></p>
<h3 id="移动端的优化">移动端的优化</h3>
<h4 id="tbdrtile-base-deffered-rendering">TBDR（Tile-Base-Deffered-Rendering）</h4>
<p>目的：减少draw call调用以降低移动端GPU负荷，避免渲染画面时手机过热甚至死机</p>
<p>为减少draw call调用，移动端gpu的方法是将整体FrameBuffer拆分为多个小块（Tiled FrameBuffer），当每一个小块均被处理后（shading），输出整个FrameBuffer，下图为<strong>IMR</strong>（从左到右至framebuffer）和<strong>TBDR</strong>（从右到左至framebuffer）对比</p>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/07/09/iNQTSOv7XuxyJp3.png" alt="image-20210709192216578" loading="lazy"></figure>
<p>TBDR简化版流水线如图（忽略其他数据处理部分，如深度检测、剔除等）：</p>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2021/07/09/gzbmJthF1qSMnPO.png" alt="image-20210709194203235" loading="lazy"></figure>
<pre><code class="language-python"># Phase one : Tilling Phase
'''
For the entire render pass
1、split viewport into a list of tiles
2、shade all vertices
3、bin transformed primitives into tiles
'''
for draw in renderPass:
    for primitive in draw:#针对片元
        for vertex in primitive:
            execute_vertex_shader(vertex)
        if primitive not culled:#若片元未被剔除，就加入tile list待后续处理
            append_tile_list(primitive)
            
# Phase two : Rendering Phase      
'''
For each tile in the render pass
1.load action(or clear)
2.rasterize
3.shade visible pixels
4.store(or don't care)
'''
for tile in renderPass:
    for primitive in tile:#tile buffer(即每一小块framebuffer)中的片元
        for fragment in primitive:
            execute_fragment_shader(fragment)
</code></pre>
<p>Tilling Phase:</p>
<figure data-type="image" tabindex="8"><img src="https://pic1.zhimg.com/v2-3d216b61bca3530a107f74ebc114a0e8_b.webp" alt="img" loading="lazy"></figure>
<p>（图片来源：<a href="https://zhuanlan.zhihu.com/p/363027882">移动端高性能图形开发 - 移动端GPU架构探究 - 知乎 (zhihu.com)</a>）</p>
<h4 id="shader优化">shader优化</h4>
<p>以下总结（包括图片来源）自：<a href="https://www.bilibili.com/video/av974058513">Unity性能优化专场</a></p>
<p>避免隐式转化 : int4(x)+1.0-&gt;float4(int4(x)+1.0)-&gt;int4(float4(int4(x)+1.0))</p>
<figure data-type="image" tabindex="9"><img src="https://i.loli.net/2021/07/10/M5SecrX3ujY8AmQ.png" alt="image-20210710220202902" loading="lazy"></figure>
<p>标量数据转换为向量，提高硬件读取效率</p>
<p>不要忽略shader指令缓存，缩短shader着色器代码</p>
<p>shader精度：</p>
<p>顶点精度：减少高精度使用；不把FP32（4字节单精度浮点数）数据上传到一个buffer并低精度读取，会因浪费额外精度而浪费内存储存和带宽；顶点position需要额外精度，使用FP32计算顶点位置</p>
<p>VS输出数据（varying）精度（仅建议）：低精度存储法线切线、顶点色、小于等于512x512的纹理uv；高精度存储世界坐标、大纹理uv或wrap mode为repeat的uv</p>
<p>Buffer与寄存器：减少shader寄存器使用（Uniform buffer数、变量数）；存储需求小时，尽量使用uniform buffer而不是SSBO(Shader Storage Buffer Object)  <a href="https://blog.csdn.net/w450468524/article/details/51649071">SSBO与UBO区别</a></p>
<p>Texture Fetch:减少texture fetch；尽量避免随机访问；压缩纹理；使用mipmap；访问3D纹理代价高；平均看，各向异性过滤消耗是各向同性2倍</p>
<p>Branching：减少动态分支语句（<a href="https://zhuanlan.zhihu.com/p/122467342">if与分支</a>）；静态分支可接受；提前退出的分支语句有时可提高性能</p>
<p>Loop：unroll优化，但代价是增加寄存器用量（<a href="https://zhuanlan.zhihu.com/p/115871017">HLSL 关键词branch flatten unroll loop</a>）；ray marching每个循环多次步进</p>
<p>low GPU occupancy（GPU占用率低）：shader耗尽内部资源（如线程、寄存器）；shader简单，线程执行完毕速度&gt;GPU创建新线程，来回切换；渲染物体占屏幕较小区域（shadow map中shadow distance过长，物体占用shadow map像素过小），分发较小线程组（thread group），GPU无线程可创建</p>
<figure data-type="image" tabindex="10"><img src="https://i.loli.net/2021/07/10/1Dtjv6Qk2iuYCbK.png" alt="image-20210710233145086" loading="lazy"></figure>
<p>GPU latency（GPU延迟）</p>
<figure data-type="image" tabindex="11"><img src="https://i.loli.net/2021/07/10/KCkEmvengjNJuz1.png" alt="image-20210710234153722" loading="lazy"></figure>
<p>针对Fragment Shader：烘焙必要数据至查询纹理(look up texture)，采样此纹理增加memory fetch时间活得结果代替ALU时间</p>
<p>TBR GMEM Load：</p>
<figure data-type="image" tabindex="12"><img src="https://i.loli.net/2021/07/10/fs7eKdvXQIMniZ9.png" alt="image-20210710235721886" loading="lazy"></figure>
<p><a href="https://www.inforcecomputing.com/blog/qualcomm-snapdragon-graphics-pipeline/">GMEM</a>(The GMEM is the local memory of the GPU and is used for fast Z, color, and stencil rendering. )</p>
<figure data-type="image" tabindex="13"><img src="https://i.loli.net/2021/07/10/LkmhJcRHToPzE8A.png" alt="image-20210710235746067" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://i.loli.net/2021/07/11/2XIKgFSnLy3BZUu.png" alt="image-20210711000049990" loading="lazy"></figure>
<p>GMEM Store&amp;Load:pass开始时，clear每个FBO；clear FBO全部内容（color，depth，stencil）以快速清除tile memory；对渲染到frame buffer的一个子区域，使用<a href="https://www.khronos.org/opengl/wiki/Scissor_Test_And_Framebuffer_Clearing">scissor</a> <a href="https://moderngl.readthedocs.io/en/latest/reference/framebuffer.html">scissor</a>设定需要的clear或rendering区域；不要在一帧多次切换渲染到同一个FBO</p>
<p>Overdraw：不透明物体排序（console&amp;PC）；不透明物体不排序（PowerVR GPU - HSR - Hidden Surface Removal ; Mail  - FPK -Forward Pixel Kill ; Adreno - Low Resolution Z Pass）</p>
<p>参考：<a href="https://gameinstitute.qq.com/community/detail/123220">针对移动端TBDR架构GPU特性的渲染优化</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/363027882">移动端高性能图形开发 - 移动端GPU架构探究 - 知乎 (zhihu.com)</a></p>
<p>[<a href="https://www.bilibili.com/video/av974058513">Unity 活动] - 线上分享会 — 性能优化专场【回放】_哔哩哔哩_bilibili</a></p>
<p>扩展阅读：</p>
<p><a href="https://zhuanlan.zhihu.com/p/259760974">IMR, TBR, TBDR 还有GPU架构方面的一些理解 - 知乎 (zhihu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/112120206">移动设备GPU架构知识汇总 - 知乎 (zhihu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/32823370">深入剖析MSAA - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.zhihu.com/question/454232769/answer/1832691014">为什么时至今日仍有人质疑手机的图形性能？ - 知乎 (zhihu.com)</a></p>
<h3 id="存疑">存疑</h3>
<p>分支和循环的优化手段：branch flatten 静态分支和动态分支区别 ，unroll loop 循环展开和不展开具体指什么</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GAMES202->assignment4 Kulla-Conty BRDF]]></title>
        <id>https://logic-three-body.github.io/post/games202-greaterassignment4-kulla-conty-brdf/</id>
        <link href="https://logic-three-body.github.io/post/games202-greaterassignment4-kulla-conty-brdf/">
        </link>
        <updated>2021-07-01T13:29:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="games202-assignment4-kulla-conty-brdf">GAMES202-&gt;assignment4 Kulla-Conty BRDF</h1>
<p>项目地址：<a href="https://github.com/logic-three-body/GAMES202_HQRTR/tree/master/homework4">here</a></p>
<h2 id="pbr">PBR</h2>
<h3 id="初始状态">初始状态</h3>
<pre><code class="language-c++">float DistributionGGX(vec3 N, vec3 H, float roughness)
{
   // TODO: To calculate GGX NDF here
   return 1.0;  
}
float GeometrySchlickGGX(float NdotV, float roughness)
{
    // TODO: To calculate Smith G1 here   
    return 1.0;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    // TODO: To calculate Smith G here
    return 1.0;
}
vec3 fresnelSchlick(vec3 F0, vec3 V, vec3 H)
{
    // TODO: To calculate Schlick F here
    return vec3(1.0);
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/06/29/Z2qJBsxXPK5HmV6.gif" alt="初始状态" loading="lazy"></figure>
<h3 id="补充公式">补充公式</h3>
<pre><code class="language-c++">float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    return nom / max(denom, 0.0001);
}

float GeometrySchlickGGX(float NdotV, float roughness) {
    float a = roughness;
    float k = (a * a) / 2.0;
    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;
    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    // TODO: To calculate Smith G here
    float NdotL = max(dot(N,L),0.0);
    float NdotV = max(dot(N,V),0.0);
    return GeometrySchlickGGX(NdotL, roughness)*GeometrySchlickGGX(NdotV, roughness);
}

float Pow5(float x)
{
    return x*x*x*x*x;
}

vec3 fresnelSchlick(vec3 F0, vec3 V, vec3 H)
{
    // TODO: To calculate Schlick F here
    float cosA = max(dot(V,H),0.0);
    float t = Pow5(1.0 - cosA);
    return F0 + (vec3(1.0)-F0) * t;
}
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/06/30/3pCDMlWy8kYNtZI.gif" alt="PBR2" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/06/30/6xP1VU4fHjcbuvB.png" alt="image-20210630150640416" loading="lazy"></figure>
<p>roughness=0.35</p>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/06/30/o4j5zJkOrpaSEAs.png" alt="detail0.35" loading="lazy"></figure>
<p>roughness=0.55</p>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/06/30/iYVMm3LjSako2Wf.png" alt="detail0.75" loading="lazy"></figure>
<p>roughness=0.95</p>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/06/30/pS6Z75uYhdjAl9U.png" alt="detail0.95" loading="lazy"></figure>
<h2 id="kulla-conty">Kulla-Conty</h2>
<h3 id="预计算eμ">预计算E(μ)</h3>
<h4 id="蒙特卡洛方法">蒙特卡洛方法</h4>
<pre><code class="language-c++">Vec3f IntegrateBRDF(Vec3f V, float roughness, float NdotV) {
    float A = 0.0;
    float B = 0.0;
    float C = 0.0;
    const int sample_count = 1024;
    Vec3f N = Vec3f(0.0, 0.0, 1.0);
	float R0 = 1.0f;
    samplePoints sampleList = squareToCosineHemisphere(sample_count);
    for (int i = 0; i &lt; sample_count; i++) {
      // TODO: To calculate (fr * ni) / p_o here
		Vec3f L = normalize(sampleList.directions[i]);
		Vec3f H = normalize(V + L);
		float cosA = std::max(0.0f,dot(V,H));
		float NdotL = std::max(dot(N, L), 0.0f);
		float F = R0 + (1.0f-R0)*pow(1- cosA,5.0f);
		float G = GeometrySmith(roughness, NdotV, NdotL);
		float D = DistributionGGX(N,H,roughness);
		float numerator = D * G * F;
		float denominator = 4.0f * NdotV * NdotL;
		float Fmicro = numerator / std::max(denominator, 1e-7f);
		float pdf = sampleList.PDFs[i];
		A += Fmicro * NdotL / pdf;
    }
	B = C = A;
    return {A / sample_count, B / sample_count, C / sample_count};
}
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2021/06/30/dDOTAH9BfM7Nu5r.png" alt="GGX_E_MC_LUT" loading="lazy"></figure>
<h4 id="重要性采样">重要性采样</h4>
<pre><code class="language-c++">Vec3f ImportanceSampleGGX(Vec2f Xi, Vec3f N, float roughness) {
    float a = roughness * roughness;

    //TODO: in spherical space - Bonus 1
	float Phi = 2 * PI * Xi.x;
    //TODO: from spherical space to cartesian space - Bonus 1
	float CosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float SinTheta = sqrt(1.0 - CosTheta * CosTheta);

	Vec3f H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;

    //TODO: tangent coordinates - Bonus 1
	Vec3f UpVector = abs(N.z) &lt; 0.999 ? Vec3f(0.0f, 0.0f, 1.0f) : Vec3f(1.0f, 0.0f, 0.0f);
	Vec3f TangentX = normalize(cross(UpVector, N));
	Vec3f TangentY = cross(N, TangentX);
    //TODO: transform H to tangent space - Bonus 1
	Vec3f result = TangentX * H.x + TangentY * H.y + N * H.z;
	return normalize(result);
}

float GeometrySchlickGGX(float NdotV, float roughness) {
    // TODO: To calculate Schlick G1 here - Bonus 1
	float a = roughness;
	float k = (a * a) / 2.0f;

	float nom = NdotV;
	float denom = NdotV * (1.0f - k) + k;

	return nom / denom;
}
</code></pre>
<pre><code class="language-c++">Vec3f IntegrateBRDF(Vec3f V, float roughness) {
	float A = 0.0;
	float B = 0.0;
	float C = 0.0;
	float R0 = 1.0f;

    const int sample_count = 1024;
    Vec3f N = Vec3f(0.0, 0.0, 1.0);
    for (int i = 0; i &lt; sample_count; i++) {
        Vec2f Xi = Hammersley(i, sample_count);
        Vec3f H = ImportanceSampleGGX(Xi, N, roughness);
        Vec3f L = normalize(H * 2.0f * dot(V, H) - V);

        float NoL = std::max(L.z, 0.0f);
        float NoH = std::max(H.z, 0.0f);
        float VoH = std::max(dot(V, H), 0.0f);
        float NoV = std::max(dot(N, V), 0.0f);
        
		float cosA = VoH;
		float F = R0 + (1.0f - R0)*pow(1 - cosA, 5.0f);
        // TODO: To calculate (fr * ni) / p_o here - Bonus 1
		A += F * VoH * GeometrySmith(roughness,NoV, NoL) / (NoV*NoH);      
    }
	B = C = A;
	return { A / sample_count, B / sample_count, C / sample_count };
}
</code></pre>
<figure data-type="image" tabindex="8"><img src="https://i.loli.net/2021/07/01/85NhKpGetYoaM6B.png" alt="GGX_E_LUT" loading="lazy"></figure>
<p>1-Eμ检验</p>
<pre><code class="language-c++">Vec3f IntegrateBRDF(Vec3f V, float roughness) {
	float A = 0.0;
	float B = 0.0;
	float C = 0.0;
	float R0 = 1.0f;

    const int sample_count = 1024;
    Vec3f N = Vec3f(0.0, 0.0, 1.0);
    for (int i = 0; i &lt; sample_count; i++) {
	    //... some code
        // TODO: To calculate (fr * ni) / p_o here - Bonus 1
		A += F * VoH * GeometrySmith(roughness,NoV, NoL) / (NoV*NoH);        
    }
	B = C = A = 1 - A;
	return { A / sample_count, B / sample_count, C / sample_count };
}
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://i.loli.net/2021/07/01/xcLgkXsSQheEj3G.png" alt="1-Eu" loading="lazy"></figure>
<h3 id="预计算eavg">预计算Eavg</h3>
<h4 id="蒙特卡洛方法-2">蒙特卡洛方法</h4>
<pre><code class="language-c++">Vec3f IntegrateEmu(Vec3f V, float roughness, float NdotV, Vec3f Ei) {
    Vec3f Eavg = Vec3f(0.0f);
    const int sample_count = 1024;
    Vec3f N = Vec3f(0.0, 0.0, 1.0);

    samplePoints sampleList = squareToCosineHemisphere(sample_count);
    for (int i = 0; i &lt; sample_count; i++) {
        Vec3f L = sampleList.directions[i];
        Vec3f H = normalize(V + L);

        float NoL = std::max(L.z, 0.0f);
        float NoH = std::max(H.z, 0.0f);
        float VoH = std::max(dot(V, H), 0.0f);
        float NoV = std::max(dot(N, V), 0.0f);

        // TODO: To calculate Eavg here
		Eavg += Ei * NoV*2.0f;
    }

    return Eavg / sample_count;
}
</code></pre>
<figure data-type="image" tabindex="10"><img src="https://i.loli.net/2021/07/01/CEc3DlKRe84HJxV.png" alt="GGX_Eavg_LUT" loading="lazy"></figure>
<h4 id="重要性采样-2">重要性采样</h4>
<figure data-type="image" tabindex="11"><img src="https://i.loli.net/2021/07/01/ESWjv5taRqnb9xI.png" alt="GGX_Eavg_LUT" loading="lazy"></figure>
<h3 id="实时计算">实时计算</h3>
<pre><code class="language-c++">vec3 MultiScatterBRDF(float NdotL, float NdotV)
{
  vec3 albedo = pow(texture2D(uAlbedoMap, vTextureCoord).rgb, vec3(2.2));

  vec3 E_o = texture2D(uBRDFLut, vec2(NdotL, uRoughness)).xyz;
  vec3 E_i = texture2D(uBRDFLut, vec2(NdotV, uRoughness)).xyz;

  vec3 E_avg = texture2D(uEavgLut, vec2(0, uRoughness)).xyz;
  // copper
  vec3 edgetint = vec3(0.827, 0.792, 0.678);
  vec3 F_avg = AverageFresnel(albedo, edgetint);
  
  // TODO: To calculate fms and missing energy here
  vec3 fms = (vec3(1.0)-E_o)*(vec3(1.0)-E_i)/(PI*(vec3(1.0)-E_avg));
  vec3 F_add = F_avg*E_avg/(vec3(1.0)-F_avg*(vec3(1.0)-E_avg));

  return F_add*fms;  
}
</code></pre>
<figure data-type="image" tabindex="12"><img src="https://i.loli.net/2021/06/30/EtFIO71aSwjd9zU.gif" alt="kulla-conty2" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://i.loli.net/2021/06/30/wDyG3rPNB9Lx4kt.png" alt="image-20210630234150696" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[观影有感之鬼妈妈]]></title>
        <id>https://logic-three-body.github.io/post/guan-ying-you-gan-zhi-gui-ma-ma/</id>
        <link href="https://logic-three-body.github.io/post/guan-ying-you-gan-zhi-gui-ma-ma/">
        </link>
        <updated>2021-06-30T05:28:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="鬼妈妈">鬼妈妈</h1>
<figure data-type="image" tabindex="1"><img src="https://img2.doubanio.com/view/photo/m/public/p1731353563.webp" alt="img" loading="lazy"></figure>
<h2 id="前言">前言</h2>
<p>当时是晚11点，2021.6.29，做了会games202的PBR作业准备睡觉，舍友打开电脑播放《鬼妈妈》，以前和舍友看过《鬼妈妈》最后一点恐怖桥段，真是心理阴影，因为我对恐怖片的上限就是《回魂夜》或者林正英系列的某几个搞笑+恐怖电影，比如《僵尸家族》系列，这次和舍友差不多从头到尾看了一遍《鬼妈妈》（不知道舍友看了这部电影多少遍），不过这次我整体观影下来对这部剧也有了很大改观，这部剧画风奇特，有定格动画的感觉，又给人一种暗黑童话的感觉，第二次看已经没那么恐怖了，但是后劲十足（不是指挥之不去的恐怖桥段，而是带给你的心灵震撼和感悟），还是很感谢舍友再次让我看到这部电影，让我对恐怖故事的刻板印象有所改观（以前我认为horrible是给人感官刺激），但是这部片子让我看到了恐怖电影（或者说是暗黑童话？）背后的魔法。</p>
<h2 id="剧情">剧情</h2>
<p>整部剧情一句话概括：一部关于小女孩家中通往另一个魔法世界隧道的暗黑童话。</p>
<p>想看官方概括的看<a href="https://www.baidu.com/link?url=0Cge1hicWBpBk9-I7Gipx9tY2hYjWtxwrTW8qhB1gWKxlKtHooY82Oiv8M-WF_xcu1KRhl7K5cuZiag0KxEAHFYzGnw2FhyFRENbQH7cnWz2x3VpztdkMBZ5Pinr6wM4&amp;wd=&amp;eqid=aa659a8d0000ffb70000000260dbecca">这里</a>吧，本文均建立在自己的理解上，如有雷同不胜荣幸。</p>
<p>剧中父母忙于工作，和小女孩交流很少，小女孩的现实世界很没意思，接着进入魔法隧道后，在另一个世界，鬼妈妈可以给她想要的一切并且可以是不是找点乐子，但是后面剧情也指出，最后的代价是她要永远留在这个充满“快乐”的世界，和她现实生活的爸爸妈妈永远分离。</p>
<p>小女孩coraline很想和父母玩，但是父母都在忙工作：</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/06/30/9LXUZwkV6B7KqhT.png" alt="image-20210630123355330" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/06/30/UJ91CYG683NFDKW.png" alt="image-20210630123326714" loading="lazy"></figure>
<p>剧中的明线就是小女孩的纽扣布偶和一个通往另一个世界的隧道，父母并不关心这个隧道，而小女孩的好奇心引发了后续的故事</p>
<p>在另一个世界里，一切都很有意思，正如小女孩想要的一切：</p>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/06/30/s9j6hpMTRIcdJi1.png" alt="image-20210630130253012" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/06/30/Fv2tC4Ki7rMyd9V.png" alt="image-20210630124955651" loading="lazy"></figure>
<p>但是代价来了：</p>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/06/30/3mCKa4JFSdj5sEp.png" alt="image-20210630130912428" loading="lazy"></figure>
<p>想在这个“安乐乡”呆下去吗，就和鬼妈妈一样，将眼睛变成纽扣吧...</p>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2021/06/30/xNSXKIeCczR3VDt.png" alt="image-20210630131053732" loading="lazy"></figure>
<p>更残酷的是，想不想呆下去并不是小女孩说的算，而全是鬼妈妈决定的...</p>
<p>到此我想表达的就结束了，有兴趣读者可以去阅读<a href="https://ishare.iask.sina.com.cn/f/37714032.html">原著</a>或观看这部电影。（几个关键词：纽扣、布偶、水晶球、黑猫、眼球）</p>
<h2 id="想法">想法</h2>
<p>首先在魔法世界里，一开始所有的东西都是以小女孩的欲望展开的，之后欲望和现实产生的冲突揭示了这个世界的真相。</p>
<p>这部电影给我的感悟分为两个，一个是小朋友内心的欲望（可以说是好奇，可以说是爱玩，甚至可以说是“贪婪”），而另一个是父母和孩子的隔阂。</p>
<p>通往危险魔法世界的门是小女孩的真妈妈打开的，之后小女孩才陷入危险的境地，剧中各种桥段也反映了父母敷衍孩子的种种话术，不把真心表达给孩子，是很容易让孩子在成长之路上误入歧途。</p>
<p>另一个关于小孩子的欲望我觉得很正常，小朋友的好奇心人皆有之，我想把这个欲望拉伸到全年龄段的角度来谈，世上没有免费午餐，一切美好的背后都有代价，而当一次次向欲望妥协的时候最后就会不如深渊，在美好与现实（纽扣与眼球）的抉择上，小女孩选择了现实（也有怕疼的因素，偏题了...），而最后小女孩也回到了现实，结局还是美好的。</p>
<p>这部电影给我的感悟就是平平淡淡才是真，如果有人问我你想不想上月球看看，我还是在家敲代码算了...（当然仁者见仁智者见智，这里仅针对我个人）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity2WebGL构建日志之il2cpp]]></title>
        <id>https://logic-three-body.github.io/post/unity2webgl-gou-jian-ri-zhi/</id>
        <link href="https://logic-three-body.github.io/post/unity2webgl-gou-jian-ri-zhi/">
        </link>
        <updated>2021-06-28T14:51:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="错误">错误</h2>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/06/26/B2rtXNLOk9wxaj6.png" alt="image-20210626201133581" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/06/26/PkmeAix7c6ZCjsy.png" alt="image-20210626200751419" loading="lazy"></figure>
<h3 id="完整的il2cppexe报错">完整的il2cpp.exe报错:</h3>
<pre><code class="language-shell">Exception: D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\il2cpp/build/deploy/net471/il2cpp.exe did not run properly!
Failed running &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\il2cpp/build/deploy/net471/il2cpp.exe&quot; --convert-to-cpp --dotnetprofile=&quot;unityaot&quot; --compile-cpp --libil2cpp-static --platform=&quot;WebGL&quot; --architecture=&quot;EmscriptenJavaScript&quot; --configuration=&quot;Release&quot; --outputpath=&quot;G:\计算机图形学\Ocean\BuildTest\UnderWaterSystem\Assets /../Temp/StagingArea/Data\Native\build.bc&quot; --cachedirectory=&quot;G:\计算机图形学\Ocean\BuildTest\UnderWaterSystem\Assets\..\Library/il2cpp_cache&quot; --compiler-flags=&quot;-Oz -DIL2CPP_EXCEPTION_DISABLED=1 &quot; --emit-method-map --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_AccessibilityModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_AIModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_AndroidJNIModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_AnimationModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_AssetBundleModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_AudioModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_ClothModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_CoreModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_CrashReportingModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_DirectorModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_DSPGraphModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_GameCenterModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_GridModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_HotReloadModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_ImageConversionModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_IMGUIModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_InputLegacyModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_InputModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_JSONSerializeModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_LocalizationModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_ParticleSystemModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_PerformanceReportingModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_Physics2DModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_PhysicsModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_ProfilerModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_ScreenCaptureModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_SharedInternalsModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_SpriteMaskModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_SpriteShapeModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_StreamingModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_SubstanceModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_SubsystemsModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_TerrainModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_TerrainPhysicsModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_TextCoreModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_TextRenderingModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_TilemapModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_TLSModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UIElementsModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UIModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UmbraModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UNETModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UnityAnalyticsModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UnityConnectModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UnityTestProtocolModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UnityWebRequestAssetBundleModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UnityWebRequestAudioModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UnityWebRequestModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UnityWebRequestTextureModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_UnityWebRequestWWWModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_VehiclesModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_VFXModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_VideoModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_VRModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_WebGLModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_WindModule_Dynamic.bc&quot; --additional-libraries=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/PlaybackEngines/WebGLSupport\BuildTools\lib\modules\WebGLSupport_XRModule_Dynamic.bc&quot; --profiler-report --map-file-parser=&quot;D:/Program Files/Unity/2019.4.17f1c1/Editor/Data/Tools/MapFileParser/MapFileParser.exe&quot; --directory=&quot;G:/计算机图形学/Ocean/BuildTest/UnderWaterSystem/Temp/StagingArea/Data/Managed&quot; --generatedcppdir=&quot;G:/计算机图形学/Ocean/BuildTest/UnderWaterSystem/Temp/StagingArea/Data/il2cppOutput&quot;  

stdout:
Building build.bc with EmscriptenToolChain
	Output directory: G:\�����ͼ��ѧ\Ocean\BuildTest\UnderWaterSystem\Temp\StagingArea\Data\Native
	Cache directory: G:\�����ͼ��ѧ\Ocean\BuildTest\UnderWaterSystem\Library\il2cpp_cache
ObjectFiles: 157 of which compiled: 0
Total compilation time: 101 milliseconds.
Response file: D:\Temp\_1842515173\response.rsp
Response file: D:\Temp\_1947989028\response.rsp
il2cpp.exe didn't catch exception: Unity.IL2CPP.Building.BuilderFailedException: &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\Emscripten_Win\python\2.7.5.3_64bit\python.exe&quot; -E &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\Emscripten\emcc&quot; -o &quot;G:\�����ͼ��ѧ\Ocean\BuildTest\UnderWaterSystem\Library\il2cpp_cache\linkresult_6419C51A308275CB21C0D680D9EAABAD\build.bc&quot; -s TOTAL_MEMORY=384MB -s DISABLE_EXCEPTION_CATCHING=0 -s WASM=0 -O3 &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_AccessibilityModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_AIModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_AndroidJNIModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_AnimationModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_AssetBundleModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_AudioModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_ClothModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_CoreModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_CrashReportingModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_DirectorModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_DSPGraphModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_GameCenterModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_GridModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_HotReloadModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_ImageConversionModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_IMGUIModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_InputLegacyModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_InputModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_JSONSerializeModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_LocalizationModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_ParticleSystemModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_PerformanceReportingModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_Physics2DModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_PhysicsModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_ProfilerModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_ScreenCaptureModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_SharedInternalsModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_SpriteMaskModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_SpriteShapeModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_StreamingModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_SubstanceModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_SubsystemsModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\lib\modules\WebGLSupport_TerrainModule_Dynamic.bc&quot; &quot;D:\Program Files\Unity\2019.4.17f1c1\Editor\Data\Playback&lt;message truncated&gt;
</code></pre>
<h2 id="解决过程">解决过程</h2>
<p>分析上面问题。有个il2cpp.exe没跑对，它应该是最严重的问题，可能是它引发下面两个问题</p>
<h3 id="看看论坛朋友们咋说">看看论坛朋友们咋说</h3>
<h4 id="方法1消除il2cpp缓存">方法1：消除il2cpp缓存</h4>
<p>下图这种消灭缓存的方法也试过了，不过一般针对unity突然抽风且代码无跨平台或其他问题的项目，不是本次的解决方法，第二个方法感觉也是拼运气的，和代码自身无关了（比较怀疑是项目里某些代码问题）</p>
<p><a href="https://forum.unity.com/threads/error-building-webgl-il2cpp-exe-did-not-run-properly.468019/">链接</a></p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/06/26/F1hmD3kQWTsxiBz.png" alt="image-20210626232936002" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/06/26/zUdhHnMYrm7SeVG.png" alt="image-20210626233143348" loading="lazy"></figure>
<h4 id="方法2清除无用包或路径重定向-成功">方法2：清除无用包或路径重定向 成功</h4>
<p><a href="https://forum.unity.com/threads/unity-2019-1-1f1-webgl-build-failed-unityeditor-buildplayerwindow-buildmethodexception.675961/">链接</a></p>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/06/26/wGO1E3TQJWIARNk.png" alt="image-20210626225703471" loading="lazy"></figure>
<p>如果按这位老哥说的，那我项目里唯一引入的外部包就是后处理，没它游戏运行不了，同时用重定向路径方法解决问题有可能，因为我的项目路径的确有中文（大意了...）</p>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/06/27/r5RWhD42ndPHsgN.png" alt="image-20210626230158336" loading="lazy"></figure>
<p><strong>更换目录后仍然构建成功</strong></p>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2021/06/27/cfN6x2uDQhgPqjX.png" alt="image-20210627142023913" loading="lazy"></figure>
<p>可以看出不管是项目源文件还是构建后文件都不能有特殊字符（比如中文）</p>
<p>不过项目虽然成功构建到WebGL可喜可贺，但是大部分效果都丢了，UI上的字符也没了（怀疑是UI也是中文字符，无法解析），所以这次的结论是构建WebGL路径一定不能有中文，同时即使成功构建，很多效果会出现缺失甚至错误的情况（由于涉及到跨平台，很多规则不一样），后续会尝试解决一些错误，写一些新的踩坑文章。</p>
<h2 id="il2cpp">IL2CPP</h2>
<p>不过这次也引发对IL2CPP的好奇，它究竟在Unity转换到WebGL有什么作用</p>
<p><a href="https://docs.unity3d.com/cn/current/Manual/IL2CPP.html">IL2CPP - Unity 手册 (unity3d.com)</a></p>
<p>从上面官方的解释看它是一种由 Unity 开发的脚本后端，可在为各种平台构建项目时替代 Mono。使用 IL2CPP 构建项目时，Unity 会在为所选平台创建本机二进制文件（例如 .exe、apk、.xap）之前将脚本和程序集内的 IL 代码转换为 C++。IL2CPP 的一些用途包括提高 Unity 项目的性能、安全性和平台兼容性。</p>
<p><a href="https://zhuanlan.zhihu.com/p/19972689">Unity将来时：IL2CPP是什么？ - 知乎 (zhihu.com) 2015</a></p>
<p>网上查到国内外介绍IL2CPP基本是2015年，看起来IL2CPP年代不小了，其也是为跨平台诞生的，和Mono是同级别概念，大概逻辑如下图【看博客原文去了解历史原因吧】，“C++是一门静态语言，这就意味着我们不能使用动态语言的那些酷炫特性。运行时生 成代码并执行肯定是不可能了。这就是Unity里面提到的所谓AOT（Ahead Of Time）编译而非JIT（Just In Time）编译。&quot;博文里的这句话也可能就是本次构建错误的原因。</p>
<p>Mono</p>
<figure data-type="image" tabindex="8"><img src="https://pic2.zhimg.com/80/cef19147534ab017c59b755b15766679_720w.jpg" alt="img" loading="lazy"></figure>
<p>IL2CPP</p>
<figure data-type="image" tabindex="9"><img src="https://pic4.zhimg.com/80/a0c8e96a34348e26ea2f7763e3452ae3_720w.jpg" alt="img" loading="lazy"></figure>
<p><a href="https://zhuanlan.zhihu.com/p/19974794">Unity3D将来时：WebGL - 知乎 (zhihu.com) 2015</a></p>
<figure data-type="image" tabindex="10"><img src="https://pic1.zhimg.com/80/d639533a41c9db2095c37a16003bfce4_720w.jpg" alt="img" loading="lazy"></figure>
<p>通过上述链接又了解了一套C++到js的过程</p>
<p><a href="https://zhuanlan.zhihu.com/p/20029506">用Unity做游戏，你需要深入了解一下IL2CPP - 知乎 (zhihu.com) 2015</a></p>
<figure data-type="image" tabindex="11"><img src="https://pic1.zhimg.com/80/db9557f4e66330679100bb290a66e3d0_720w.jpg" alt="img" loading="lazy"></figure>
<p>以上又是一个关键转换流程图</p>
<p><a href="https://zhuanlan.zhihu.com/p/20063880">IL2CPP 深入讲解：代码生成之旅 - 知乎 (zhihu.com)</a></p>
<p>在Temp\StagingArea\Data\il2cppOutput下查看生成的C++（转换的C++文件非常多）,Emscripten存放临时转换的js</p>
<p>在IL2CPP的后端处理中，通常会使用字节码剥离（byte code stripping）技术来减少可执行文件的尺寸</p>
<figure data-type="image" tabindex="12"><img src="https://i.loli.net/2021/06/28/hO2nUtYRukDW4Ig.png" alt="image-20210628171638869" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://i.loli.net/2021/06/28/uca8Md9knxSqzBH.png" alt="image-20210628171818310" loading="lazy"></figure>
<p><a href="https://zhuanlan.zhihu.com/p/20167569">Unity深入讲解：方法调用介绍 - 知乎 (zhihu.com)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/20207712">IL2CPP 深入讲解：泛型共享 - 知乎 (zhihu.com)</a></p>
<p>上述两个链接又介绍了IL2CPP相关优化</p>
<p>IL2CPP所覆盖的知识已经相当底层，日后学习一下这本书补一补底层知识</p>
<figure data-type="image" tabindex="14"><img src="https://i.loli.net/2021/06/28/keNJqCOon3Qj5cX.png" alt="image-20210628224651061" loading="lazy"></figure>
<h2 id="参考链接">参考链接</h2>
<p><a href="https://docs.unity3d.com/cn/current/Manual/webgl-building.html">构建和运行 WebGL 项目 - Unity 手册 (unity3d.com)</a></p>
<p><a href="https://stackoverflow.com/questions/59061059/unity-build-exception-il2cpp-exe-did-not-run-properly">android - Unity Build - Exception: il2cpp.exe did not run properly - Stack Overflow</a></p>
<p>https://forum.unity.com/threads/exception-il2cpp-exe-did-not-run-properly.659323/</p>
<p><a href="https://forum.unity.com/threads/build-il2cpp-errors-please-how-fix-it.492556/">Build - IL2CPP errors - Please, how fix it? - Unity Forum</a></p>
<p><a href="https://stackoverflow.com/questions/54194428/unable-to-build-in-unity-unityeditor-buildplayerwindowbuildmethodexception">unity3d - Unable to build In unity : &quot;UnityEditor.BuildPlayerWindow+BuildMethodException:&quot; - Stack Overflow</a></p>
<p><a href="https://forum.unity.com/threads/unity-2019-1-1f1-webgl-build-failed-unityeditor-buildplayerwindow-buildmethodexception.675961/">Unity 2019.1.1f1 WebGL build failed : 'UnityEditor.BuildPlayerWindow+BuildMethodException' - Unity Forum</a></p>
<p><a href="https://forum.unity.com/threads/error-building-webgl-il2cpp-exe-did-not-run-properly.468019/">Error Building webgl: il2cpp.exe did not run properly! - Unity Forum</a></p>
<p><a href="https://forum.unity.com/threads/il2cpp-exe-did-not-run-properly-webgl.1034827/">il2cpp.exe did not run properly! WebGL - Unity Forum</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GAMES101->assignment2 Triangles and Z-buffering]]></title>
        <id>https://logic-three-body.github.io/post/games101-greaterassignment2-triangles-and-z-buffering/</id>
        <link href="https://logic-three-body.github.io/post/games101-greaterassignment2-triangles-and-z-buffering/">
        </link>
        <updated>2021-06-24T11:08:33.000Z</updated>
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/logic-three-body/GameS101_IntroductionTOcomputerGraph/tree/%E4%BD%9C%E4%B8%9A1/02Z-Buffer_rasterize">here</a></p>
<h2 id="包围盒">包围盒</h2>
<pre><code class="language-c++">// TODO : Find out the bounding box of current triangle.
// iterate through the pixel and find if the current pixel is inside the triangle
int left = MIN(v[0].x(), MIN(v[1].x(), v[2].x())) - 1;
int right = MAX(v[0].x(), MAX(v[1].x(), v[2].x())) + 1;
int bottom = MIN(v[0].y(), MIN(v[1].y(), v[2].y())) - 1;
int top = MAX(v[0].y(), MAX(v[1].y(), v[2].y())) + 1;
</code></pre>
<h2 id="三角形栅格化算法">三角形栅格化算法</h2>
<pre><code class="language-c++">for (int x = left; x &lt;= right; x++)
{
    for (int y = bottom; y &lt;= top; y++)
    {
        if (insideTriangle(x, y, t.v))
        {
            std::tuple&lt;float, float, float&gt; alpha = computeBarycentric2D(x, y, t.v);
            float w_reciprocal = 1.0 / (std::get&lt;0&gt;(alpha) / v[0].w() + std::get&lt;1&gt;(alpha) / v[1].w() + std::get&lt;2&gt;(alpha) / v[2].w());
            float z_interpolated = std::get&lt;0&gt;(alpha) * v[0].z() / v[0].w() + std::get&lt;1&gt;(alpha) * v[1].z() / v[1].w() + std::get&lt;2&gt;(alpha) * v[2].z() / v[2].w();
            z_interpolated *= w_reciprocal;
            if (z_interpolated &lt; depth_buf[get_index(x, y)])
            {
                depth_buf[get_index(x, y)] = z_interpolated;
                set_pixel(Vector3f(x, y, z_interpolated), t.getColor());
            }
        }
    }
}
</code></pre>
<h2 id="点是否在三角形内">点是否在三角形内</h2>
<pre><code class="language-c++">static bool insideTriangle(float x, float y, const Vector3f* _v)
{
	// TODO : Implement this function to check if the point (x, y) is inside the triangle represented by _v[0], _v[1], _v[2]
	float a = _v[0].x(), b = _v[0].y(), c = _v[1].x(), d = _v[1].y(), e = _v[2].x(), f = _v[2].y();
	float t1 = (c - a)*(y - b) - (d - b)*(x - a);
	float t2 = (e - c)*(y - d) - (f - d)*(x - c);
	float t3 = (a - e)*(y - f) - (b - f)*(x - e);
	bool x1 = true ? t1 &gt; 0.0:false, x2 = true ? t2 &gt; 0.0:false, x3 = true ? t3 &gt; 0.0:false;
	bool ret = false;
	if ((x1 &amp;x2&amp;x3) || (!x1)&amp;(!x2)&amp;(!x3)) ret = true;
	return ret;
}
</code></pre>
<h2 id="z-buffer-算法">z-buffer 算法</h2>
<pre><code class="language-c++">//... some code
if (z_interpolated &lt; depth_buf[get_index(x, y)])
{
    depth_buf[get_index(x, y)] = z_interpolated;
    set_pixel(Vector3f(x, y, z_interpolated), t.getColor());
}
</code></pre>
<h2 id="anti-aliasing">Anti-aliasing</h2>
<pre><code class="language-c++">//4x4 SuperSampling
const int sam_num16 = 16;
const int xy = 2;
const int x_coord = 0;
const int y_coord = 1;
float dir4x4[sam_num16][xy] = {
    {0.125, 0.125},
    {0.125, 0.375},
    {0.125, 0.625},
    {0.125, 0.875},
    {0.375, 0.125},
    {0.375, 0.375},
    {0.375, 0.625},
    {0.375, 0.875},
    {0.625, 0.125},
    {0.625, 0.375},
    {0.625, 0.625},
    {0.625, 0.875},
    {0.875, 0.125},
    {0.875, 0.375},
    {0.875, 0.625},
    {0.875, 0.875},
};
//2x2 SuperSampling
const int sam_num4 = 4;
float dir2x2[sam_num4][xy] = {
    {0.25, 0.25},
    {0.25, 0.75},
    {0.75, 0.25},
    {0.75, 0.75},
};

for (int x = left; x &lt;= right; x++)
{
    for (int y = bottom; y &lt;= top; y++)
    {
        float min_dep = INFINITY;
        int count = 0;
        for (int i = 0; i &lt; sam_num4; i++)
        {
            if (insideTriangle(x + dir2x2[i][x_coord], y + dir2x2[i][y_coord], t.v))
            {
                count++;
                std::tuple&lt;float, float, float&gt; alpha = computeBarycentric2D(x, y, t.v);
                float w_reciprocal = 1.0 / (std::get&lt;0&gt;(alpha) / v[0].w() + std::get&lt;1&gt;(alpha) / v[1].w() + std::get&lt;2&gt;(alpha) / v[2].w());
                float z_interpolated = std::get&lt;0&gt;(alpha) * v[0].z() / v[0].w() + std::get&lt;1&gt;(alpha) * v[1].z() / v[1].w() + std::get&lt;2&gt;(alpha) * v[2].z() / v[2].w();
                z_interpolated *= w_reciprocal;
                min_dep = MIN(min_dep, z_interpolated);
            }
        }
        if (count == 0)
            continue;
        if (min_dep &lt; depth_buf[get_index(x, y)])
        {
            depth_buf[get_index(x, y)] = min_dep;
            set_pixel(Vector3f(x, y, min_dep), t.getColor() * count / sam_num4);
        }
    }
}
</code></pre>
<h2 id="结果图">结果图</h2>
<h3 id="未抗锯齿">未抗锯齿</h3>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/06/24/U5l6M1RWhAxNXrV.png" alt="result" loading="lazy"></figure>
<h3 id="2x2-msaa">2x2 MSAA</h3>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/06/24/Nq7f9n1pWi5QK2L.png" alt="result2x2" loading="lazy"></figure>
<h3 id="4x4-msaa">4X4 MSAA</h3>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/06/24/yPCYjwNZpR6dKlB.png" alt="result4x4" loading="lazy"></figure>
<h2 id="参考">参考：</h2>
<p><a href="https://blog.csdn.net/weixin_53110214/article/details/114456911">pcl运行无法解析的外部符号 __imp__calloc_dbg</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GAMES202 -> assignment2 precoumpute radiance transfer]]></title>
        <id>https://logic-three-body.github.io/post/assignment2-precoumpute-radiance-transfer/</id>
        <link href="https://logic-three-body.github.io/post/assignment2-precoumpute-radiance-transfer/">
        </link>
        <updated>2021-06-18T08:33:22.000Z</updated>
        <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/logic-three-body/GAMES202_HQRTR/tree/master/Assignment2">here</a></p>
<p>//TODO add context</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GAMES202 -> assignment3 screen space raytracing]]></title>
        <id>https://logic-three-body.github.io/post/assignment3-screen-space-raytracing/</id>
        <link href="https://logic-three-body.github.io/post/assignment3-screen-space-raytracing/">
        </link>
        <updated>2021-06-18T08:31:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="evaldir">EvalDir</h2>
<pre><code class="language-glsl">vec3 EvalDirectionalLight(vec2 uv) {
  vec3 lightDirWS = normalize(uLightDir);
  vec3 normalWS = normalize(GetGBufferNormalWorld(uv));
  float ndotl = max(0.0,dot(lightDirWS,normalWS));
  float visibility = GetGBufferuShadow(uv);
  Le = uLightRadiance * visibility * ndotl;
  return Le;
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/06/05/dr3AWa9bjVmhvEJ.gif" alt="dir_only" loading="lazy"></figure>
<h2 id="evaldiffuse">EvalDiffuse</h2>
<pre><code class="language-glsl">vec3 EvalDiffuse(vec3 wi, vec3 wo, vec2 uv) {
  vec3 normal = normalize(GetGBufferNormalWorld(uv));
  vec3 diff = GetGBufferDiffuse(uv);
  float cosTheta = dot(normalize(wi),normal);
  vec3 L = diff * INV_PI * cosTheta;
  return L;
}
</code></pre>
<p>main：</p>
<pre><code class="language-glsl">vec3 worldPos = vPosWorld.xyz;
vec2 uv0 = GetScreenCoordinate(worldPos);
vec3 wi = normalize(uLightDir);
vec3 wo = normalize(uCameraPos - worldPos);
float scale = 5.0;
vec3 dirL = EvalDirectionalLight(uv0);
L+=dirL*EvalDiffuse(wi,wo,uv0)*scale;
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/06/05/73yn8sEIHYKA2LN.gif" alt="dir+Diff" loading="lazy"></figure>
<h2 id="raymarch">RayMarch</h2>
<pre><code class="language-glsl">bool RayMarch(vec3 ori, vec3 dir, out vec3 hitPos) {
  vec2 ori_uv = GetScreenCoordinate(ori);
  vec2 dir_uv = GetScreenCoordinate(dir);
  float step_size = 2.0/float(total_step)/length(dir_uv);
  
  const int first_step=1;
  for(int i = first_step;i&lt;=total_step;++i)
  { 
    vec3 pos = ori+dir*step_size*float(i);
    vec2 pos_uv = GetScreenCoordinate(pos);
    if(GetGBufferDepth(pos_uv)+EPS&lt;GetDepth(pos))
    {
      hitPos = pos;
      return true;
    }
  }
 // hitPos = vec3(normalize(dir_uv),0.0);
  return false;
}
</code></pre>
<p>镜面反射查询</p>
<pre><code class="language-glsl">  //test mirro:
  vec3 test_dir = vec3(0.0);
  test_dir=reflect(-wo,normal);
  vec3 test_hit;
  if(RayMarch(worldPos,test_dir,test_hit))
  {
    indir = GetGBufferDiffuse(GetScreenCoordinate(test_hit));    
  }
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/06/06/3bDSpK4ZitxrJwe.gif" alt="镜面反射handin" loading="lazy"></figure>
<p>间接光着色（spp=1）</p>
<pre><code class="language-glsl">  //indir shading:
  for(int i=0;i&lt;SAMPLE_NUM;++i)
  {
    float pdf=0.0;
    vec3 dir=SampleHemisphereUniform(s,pdf);
    //vec3 dir=SampleHemisphereCos(s,pdf);
    dir = dirToWorld(normal,dir);
    vec3 hitPos=vec3(0.0);
    vec3 direct = normalize(vec3(1.0,0.0,0.0));
    direct = normalize(dir);
    if(RayMarch(worldPos,direct,hitPos))
    {
      vec2 uv1=GetScreenCoordinate(hitPos);
      if(length(res)&gt;0.0) 
        indir += res;//avoid neg   
    }
  }
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/06/06/tEuHrnKIZAs74iN.gif" alt="间接光" loading="lazy"></figure>
<h2 id="其他图片结果">其他图片结果</h2>
<h3 id="cube2">cube2</h3>
<h4 id="直接光">直接光</h4>
<h4 id=""><img src="https://i.loli.net/2021/06/06/8hXzv7RuApMOfjB.png" alt="直接光cube" loading="lazy"></h4>
<h4 id="间接光spp100">间接光spp=100</h4>
<h4 id="-2"><img src="https://i.loli.net/2021/06/06/ALowkM8OFeQZdyX.png" alt="间接光cube" loading="lazy"></h4>
<h4 id="直接光间接光spp100">直接光+间接光spp=100</h4>
<h4 id="-3"><img src="https://i.loli.net/2021/06/06/6lno4VzcE3PiewF.png" alt="直接光+间接光cube" loading="lazy"></h4>
<h3 id="cave">cave</h3>
<h4 id="直接光-2">直接光</h4>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/06/06/pAMqtfR1lL4cFU3.png" alt="直接光cave" loading="lazy"></figure>
<h4 id="间接光spp100-2">间接光spp=100</h4>
<p>【说明：为了显示明显，仅显示间接光时将间接光强度进行了增大】</p>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/06/06/j2kNBTYmoV6M3fO.png" alt="间接光cave" loading="lazy"></figure>
<h4 id="直接光间接光spp100-2">直接光+间接光spp=100</h4>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2021/06/06/mAnztkgGE7IOZ39.png" alt="直接光+间接光cave" loading="lazy"></figure>
<h2 id="主函数-main">主函数 main</h2>
<pre><code class="language-glsl">vec3 dirToWorld(vec3 normal,vec3 localDir)
{
  vec3 b1=vec3(0.0);
  vec3 b2=vec3(0.0);
  LocalBasis(normal,b1,b2);
  mat3 tbn = mat3(b1,b2,normal);
  return tbn*localDir;
}
</code></pre>
<pre><code class="language-glsl">void main() {
  float s = InitRand(gl_FragCoord.xy);
  vec3 L = vec3(0.0);
  vec3 worldPos = vPosWorld.xyz;
  vec2 uv0 = GetScreenCoordinate(worldPos);
  vec3 dirL = EvalDirectionalLight(uv0);
  //L = GetGBufferDiffuse(uv0);
  vec3 wi = normalize(uLightDir);
  vec3 wo = normalize(uCameraPos - worldPos);
  float scale = 5.0;
  L+=dirL*EvalDiffuse(wi,wo,uv0)*scale;
  //L = dirL/scale;
  vec3 normal = GetGBufferNormalWorld(uv0);
  //raymarch:
  vec3 indir=vec3(0.0);

  //test mirro:
  // vec3 test_dir = vec3(0.0);
  // test_dir=reflect(-wo,normal);
  // vec3 test_hit;
  // if(RayMarch(worldPos,test_dir,test_hit))
  // {
  //   indir = GetGBufferDiffuse(GetScreenCoordinate(test_hit));    
  // }


  //indir shading:
  for(int i=0;i&lt;SAMPLE_NUM;++i)
  {
    float pdf=0.0;
    vec3 dir=SampleHemisphereUniform(s,pdf);
    //vec3 dir=SampleHemisphereCos(s,pdf);
    dir = dirToWorld(normal,dir);
    vec3 brdf0 = EvalDiffuse(wi,wo,uv0)/pdf;
    vec3 hitPos=vec3(0.0);
    vec3 direct = normalize(vec3(1.0,0.0,0.0));
    direct = normalize(dir);
    if(RayMarch(worldPos,direct,hitPos))
    {
      vec2 uv1=GetScreenCoordinate(hitPos);
      vec3 res = brdf0*EvalDiffuse(-wi,vec3(0.0),uv1)
                 *EvalDirectionalLight(uv1);      
      //vec3 res = EvalDiffuse(-direct,vec3(0.0),uv1);
      if(length(res)&gt;0.0) 
        indir += res;//avoid neg   
    }
  }
  indir/=float(SAMPLE_NUM);
  //L= indir*10.0;
  L+=indir;
  vec3 color = pow(clamp(L, vec3(0.0), vec3(1.0)), vec3(1.0 / 2.2));
  //color=vec3(0.6);
  gl_FragColor = vec4(vec3(color.rgb), 1.0);
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebGL three.js-example 研究 ->WebGL shader 实现Phong光照模型]]></title>
        <id>https://logic-three-body.github.io/post/webgl-shader-shi-xian-phong-guang-zhao-mo-xing/</id>
        <link href="https://logic-three-body.github.io/post/webgl-shader-shi-xian-phong-guang-zhao-mo-xing/">
        </link>
        <updated>2021-06-18T08:17:31.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>之前里利用<a href="https://logic-three-body.github.io/post/threejs-shader-shi-xian-phong-guang-zhao-mo-xing/">Three.js</a>实现过Phong光照模型，也在<a href="https://github.com/logic-three-body/GAMES202_HQRTR/tree/master/homework0/src/shaders/phongShader">GAMES202作业0</a>接触过phong shader，这次更接近底层，利用WebGL实现一个简易的Phong光照模型</p>
<p>项目工程：<a href="https://github.com/logic-three-body/ThreeJSLearn/blob/master/WebGL/WebGL_Guide_Code/ch08/LightedTranslatedRotatedCube.js">here</a></p>
<h2 id="实现">实现</h2>
<h3 id="数据的传递">数据的传递</h3>
<p>立方体数据：顶点 顶点索引 法线 颜色</p>
<pre><code class="language-js">  // Create a cube
  //    v6----- v5
  //   /|      /|
  //  v1------v0|
  //  | |     | |
  //  | |v7---|-|v4
  //  |/      |/
  //  v2------v3

// Coordinates
var vertices = new Float32Array([
    1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0,     // v0-v1-v2-v3 front
    1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0,     // v0-v3-v4-v5 right
    1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0,     // v0-v5-v6-v1 up
    -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, // v1-v6-v7-v2 left
    -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, // v7-v4-v3-v2 down
    1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0  // v4-v7-v6-v5 back
]);

// Colors
var colors = new Float32Array([
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, // v0-v1-v2-v3 front
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, // v0-v3-v4-v5 right
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, // v0-v5-v6-v1 up
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, // v1-v6-v7-v2 left
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, // v7-v4-v3-v2 down
    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0  // v4-v7-v6-v5 back
]);

// Normal
var normals = new Float32Array([
    0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,     // v0-v1-v2-v3 front
    1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0,     // v0-v3-v4-v5 right
    0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,     // v0-v5-v6-v1 up
    -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, // v1-v6-v7-v2 left
    0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, // v7-v4-v3-v2 down
    0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0  // v4-v7-v6-v5 back
]);

// Indices of the vertices
var indices = new Uint8Array([
    0, 1, 2, 0, 2, 3,       // front
    4, 5, 6, 4, 6, 7,       // right
    8, 9, 10, 8, 10, 11,    // up
    12, 13, 14, 12, 14, 15, // left
    16, 17, 18, 16, 18, 19, // down
    20, 21, 22, 20, 22, 23  // back
]);
</code></pre>
<p>准备传入shader的数据</p>
<pre><code class="language-js">// Get the storage locations of uniform variables
var u_MvpMatrix = gl.getUniformLocation(gl.program, 'u_MvpMatrix');
var u_NormalMatrix = gl.getUniformLocation(gl.program, 'u_NormalMatrix');
var u_LightColor = gl.getUniformLocation(gl.program, 'u_LightColor');
var u_LightDirection = gl.getUniformLocation(gl.program, 'u_LightDirection');
var u_AmbientLight = gl.getUniformLocation(gl.program, 'u_AmbientLight');
var u_CameraPosition = gl.getUniformLocation(gl.program, 'u_CameraPosition');
</code></pre>
<p>设置光源方向以及环境光颜色</p>
<pre><code class="language-js">// Set the light color (white)
gl.uniform3f(u_LightColor, 1.0, 1.0, 1.0);
// Set the light direction (in the world coordinate)
var lightDirection = new Vector3([ 0.0, 3.0, 4.0 ]);
lightDirection.normalize(); // Normalize
gl.uniform3fv(u_LightDirection, lightDirection.elements);
// Set the ambient light
gl.uniform3f(u_AmbientLight, 0.2, 0.2, 0.2);
</code></pre>
<p>设置相机视角位置</p>
<pre><code class="language-js">//Set Camera parm
var g_eyeX = 3,
    g_eyeY = 3,
    g_eyeZ = 7; // Eye position
var CameraPos = new Vector3(g_eyeX, g_eyeY, g_eyeZ);
gl.uniform3fv(u_CameraPosition, CameraPos.elements);
</code></pre>
<p>渲染函数</p>
<pre><code class="language-js">function draw(gl, u_MvpMatrix, mvpMatrix, normalMatrix, modelMatrix, u_NormalMatrix, n) {
  mvpMatrix.multiply(modelMatrix);
  gl.uniformMatrix4fv(u_MvpMatrix, false, mvpMatrix.elements);
  // Calculate the matrix to transform the normal based on the model matrix
  normalMatrix.setInverseOf(modelMatrix);
  normalMatrix.transpose();
  // Pass the transformation matrix for normals to u_NormalMatrix
  gl.uniformMatrix4fv(u_NormalMatrix, false, normalMatrix.elements);
  // Clear color and depth buffer
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  // Draw the cube
  gl.drawElements(gl.TRIANGLES, n, gl.UNSIGNED_BYTE, 0);
}
</code></pre>
<h4 id="model矩阵">model矩阵</h4>
<p>可利用键盘控制model矩阵以控制物体旋转与平移（类比<a href="https://github.com/logic-three-body/GameS101_IntroductionTOcomputerGraph/tree/%E4%BD%9C%E4%B8%9A1/Roate_Project">GAMES101作业1</a>）</p>
<p>最开始立方体先绕Z轴旋转90度</p>
<pre><code class="language-js">modelMatrix.rotate(90, 0, 0, 1); // Rotate 90 degree around the z-axis
function keydown(ev, gl, u_MvpMatrix, mvpMatrix, normalMatrix, modelMatrix, u_NormalMatrix, n)
{
    var move = 0.01;
    var angle = 1;
    if (ev.keyCode == 39) // The right arrow key was pressed
    {
        console.log(&quot;PRESS 39&quot;);
        modelMatrix.setTranslate(0, -move, 0); // right arrow
    }
    else if (ev.keyCode == 37)
    {
        console.log(&quot;PRESS 37&quot;);
        modelMatrix.setTranslate(0, move, 0); // left arrow
    }
    else if (ev.keyCode == 40) // down arrow
    {
        console.log(&quot;PRESS 40&quot;);
        modelMatrix.setTranslate(-move, 0, 0);
    }
    else if (ev.keyCode == 38) // down arrow
    {
        console.log(&quot;PRESS 38&quot;);
        modelMatrix.setTranslate(move, 0, 0);
    }
    else if (ev.keyCode == 68) // down D
    {
        modelMatrix.rotate(90 + angle, 0, 0, 1); // left arrow
        console.log(&quot;PRESS D&quot;);
    }
    else if (ev.keyCode == 65) // down A
    {
        console.log(&quot;PRESS A&quot;);
        modelMatrix.rotate(90 - angle, 0, 0);
    }
    else if (ev.keyCode == 87) // down W
    {
        modelMatrix.rotate(90 + angle, 0, 1, 0); // left arrow
        console.log(&quot;PRESS W&quot;);
    }
    else if (ev.keyCode == 83) // down S
    {
        console.log(&quot;PRESS S&quot;);
        modelMatrix.rotate(90 - angle, 0, 1, 0);
    }
    else
    {
        return;
    }
    draw(gl, u_MvpMatrix, mvpMatrix, normalMatrix, modelMatrix, u_NormalMatrix, n);
}
</code></pre>
<h4 id="mvp矩阵">mvp矩阵</h4>
<p>设置view视角矩阵和projection投影矩阵 (p * v * m * vertexdata)</p>
<pre><code class="language-js">// Calculate the view projection matrix
mvpMatrix.setPerspective(30, canvas.width / canvas.height, 1, 100);//projection
mvpMatrix.lookAt(g_eyeX, g_eyeY, g_eyeZ, 0, 0, 0, 0, 1, 0);//view
//...some code
mvpMatrix.multiply(modelMatrix);
</code></pre>
<h4 id="法线矩阵的处理">法线矩阵的处理</h4>
<p>法线变换推到过程：请参考Unityshader入门精要/第四章/4.7 法线变换</p>
<p>这里给出结论：法线变换矩阵 = 原变换矩阵逆转置</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/06/18/zYo4Z5sefLcPkXr.png" alt="image-20210618145246902" loading="lazy"></figure>
<pre><code class="language-js">// Calculate the matrix to transform the normal based on the model matrix
normalMatrix.setInverseOf(modelMatrix);
normalMatrix.transpose();
// Pass the transformation matrix for normals to u_NormalMatrix
gl.uniformMatrix4fv(u_NormalMatrix, false, normalMatrix.elements);
</code></pre>
<h3 id="shader实现">shader实现</h3>
<p>Phong光照模型实现的三要素：环境光+漫反射+高光，其中高光实现难度相对较大，需要利用视角方向和光源反射方向</p>
<pre><code class="language-js">// Vertex shader program
var VSHADER_SOURCE =
  'attribute vec4 a_Position;\n' +
  'attribute vec4 a_Color;\n' +
  'attribute vec4 a_Normal;\n' +
  'uniform mat4 u_MvpMatrix;\n' +
  'uniform mat4 u_NormalMatrix;\n' + // Transformation matrix of the normal
  'uniform vec3 u_LightColor;\n' + // Light color
  'uniform vec3 u_LightDirection;\n' + // Light direction (in the world coordinate, normalized)
  'uniform vec3 u_AmbientLight;\n' + // Ambient light color
  'uniform vec3 u_CameraPosition;\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_Position = u_MvpMatrix * a_Position;\n' +
  // Recalculate the normal based on the model matrix and make its length 1.
  '  vec3 normal = normalize(vec3(u_NormalMatrix * a_Normal));\n' +
  // Calculate the dot product of the light direction and the orientation of a surface (the normal)
  '  float nDotL = max(dot(u_LightDirection, normal), 0.0);\n' +
  // Calculate the color due to diffuse reflection
  '  vec3 diffuse = u_LightColor * a_Color.rgb * nDotL;\n' +
  // Calculate the color due to ambient reflection
  '  vec3 ambient = u_AmbientLight * a_Color.rgb;\n' +
  //Calculate view direct
  ' vec3 viewDir = normalize(u_CameraPosition - gl_Position.xyz);' +
  //Calculate reflect direct
  ' vec3 reflectDir = reflect(u_LightDirection,normal);' +
  //Calculate specular
  'float spec =pow (max(dot(viewDir, reflectDir), 0.0), 35.0);' +
  'vec3 specular = u_LightColor*spec*4.0;' +
  //Add the surface colors due to diffuse reflection and ambient reflection and our specular for phong
  '  v_Color = vec4(diffuse + ambient + specular, a_Color.a);\n' +
  '}\n';

// Fragment shader program
var FSHADER_SOURCE =
  '#ifdef GL_ES\n' +
  'precision mediump float;\n' +
  '#endif\n' +
  'varying vec4 v_Color;\n' +
  'void main() {\n' +
  '  gl_FragColor = v_Color;\n' +
  '}\n';
</code></pre>
<h2 id="结果图">结果图</h2>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/06/18/6EbAJpvYBcTsCI8.gif" alt="phong模型2" loading="lazy"></figure>
<h2 id="参考">参考</h2>
<p>WebGL权威指南/第八章/示例程序（LightedTranslatedRotatedCube）</p>
<p>WebGL权威指南/第八章/魔法矩阵：逆转置矩阵</p>
<p>WebGL权威指南/第七章/示例程序（LookAtTrianglesWithKeys）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GAMES101->assignment1 Transform]]></title>
        <id>https://logic-three-body.github.io/post/games101-greaterassignment1-transform/</id>
        <link href="https://logic-three-body.github.io/post/games101-greaterassignment1-transform/">
        </link>
        <updated>2021-06-18T07:08:56.000Z</updated>
        <content type="html"><![CDATA[<h1 id="作业1-旋转与投影">作业1 旋转与投影</h1>
<h2 id="模型矩阵">模型矩阵</h2>
<pre><code class="language-C++">Eigen::Matrix4f get_model_matrix(float rotation_angle)
{
	Eigen::Matrix4f model = Eigen::Matrix4f::Identity();

	// TODO: Implement this function
	// Create the model matrix for rotating the triangle around the Z axis.
	// Then return it.
	Eigen::Matrix4f rotateZ, rotateY, rotateX, scaleK, translateX, translateZ;
	float angle = rotation_angle / 180 * MY_PI;
	//rotate with z
	rotateZ &lt;&lt; std::cos(angle), -1 * std::sin(angle), 0, 0, \
		std::sin(angle), std::cos(angle), 0, 0, \
		0, 0, 1, 0, \
		0, 0, 0, 1;
	//rotate with x
	rotateX &lt;&lt; 1, 0, 0, 0, \
		0, std::cos(angle), -std::sin(angle), 0, \
		0, std::sin(angle), std::cos(angle), 0, \
		0, 0, 0, 1;
	//rotate with y
	rotateY &lt;&lt; std::cos(angle), 0, std::sin(angle), 0, \
		0, 1, 0, 0, \
		- std::sin(angle), 0, std::cos(angle), 0, \
		0, 0, 0, 1;

	//scale with k
	float k = .01;//scale factor
	scaleK &lt;&lt; k , 0, 0, 0, \
		0, k, 0, 0, \
		0, 0, k , 0, \
		0, 0, 0, 1;

	//translate X OR Z for any step
	float step = -angle / 10.0;
	translateX &lt;&lt; 1, 0, 0, step, \
		0, 1, 0, 0, \
		0, 0, 1, 0, \
		0, 0, 0, 1;

	translateZ &lt;&lt; 1, 0, 0, 0, \
		0, 1, 0, 0, \
		0, 0, 1, step, \
		0, 0, 0, 1;
	model = rotateZ * model;
	//model = rotateX * model;
	//model = rotateY * model;
	//model = scaleK * model;
	//model *= translateX;
	//model *= translateZ;
	//model *= translateX*rotateX*scaleK;
	//model *= rotateZ * scaleK;
	//model *= rotateY * scaleK;
	return model;
}
</code></pre>
<h2 id="透视投影矩阵">透视投影矩阵</h2>
<pre><code class="language-C++">Eigen::Matrix4f get_projection_matrix(float eye_fov, float aspect_ratio, float zNear, float zFar)
{
	Eigen::Matrix4f projection = Eigen::Matrix4f::Identity();
	Eigen::Matrix4f M_persp2ortho(4, 4);
	Eigen::Matrix4f M_ortho_scale(4, 4);
	Eigen::Matrix4f M_ortho_trans(4, 4);

	float angle = eye_fov * MY_PI / 180.0; // half angle
	float height = zNear * tan(angle) * 2;
	float width = height * aspect_ratio;

	auto t = -zNear * tan(angle / 2);
	auto r = t * aspect_ratio;
	auto l = -r;
	auto b = -t;

	M_persp2ortho &lt;&lt; zNear, 0, 0, 0,
		0, zNear, 0, 0,
		0, 0, zNear + zFar, -zNear * zFar,
		0, 0, 1, 0;

	M_ortho_scale &lt;&lt; 2 / (r - l), 0, 0, 0,
		0, 2 / (t - b), 0, 0,
		0, 0, 2 / (zNear - zFar), 0,
		0, 0, 0, 1;

	M_ortho_trans &lt;&lt; 1, 0, 0, -(r + l) / 2,
		0, 1, 0, -(t + b) / 2,
		0, 0, 1, -(zNear + zFar) / 2,
		0, 0, 0, 1;

	Eigen::Matrix4f M_ortho = M_ortho_scale * M_ortho_trans;
	//prespective
	projection = M_ortho * M_persp2ortho * projection;

	//orthogonal
	//projection *= M_ortho;

	return projection;
}
</code></pre>
<h2 id="三角形旋转">三角形旋转</h2>
<h3 id="绕z轴">绕Z轴</h3>
<pre><code class="language-c++">rotateZ &lt;&lt; std::cos(angle), -1 * std::sin(angle), 0, 0,
    std::sin(angle), std::cos(angle), 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1;
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/06/08/i46RI9kdg2f8OKH.gif" alt="ZRotate" loading="lazy"></figure>
<h3 id="绕任意轴">绕任意轴</h3>
<pre><code class="language-c++">RotateAxis &lt;&lt; x * x + (1 - x * x) * cos_angle, x *y *(1 - cos_angle) + z *sin_angle, x *z *(1 - cos_angle) - y *sin_angle, 0,
    x *y *(1 - cos_angle) - z *sin_angle, y *y + (1 - y * y) * cos_angle, y *z *(1 - cos_angle) + sin_angle, 0,
    x *z *(1 - cos_angle) + y *sin_angle, y *z *(1 - cos_angle) - x *sin_angle, z *z + (1 - z * z) * cos_angle, 0,
    0, 0, 0, 1;
</code></pre>
<pre><code class="language-C++">Vector3f Vs = { 1,1,1 };
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/06/08/KOYZfJGtSx75vad.gif" alt="Rotate1" loading="lazy"></figure>
<pre><code class="language-c++">Vector3f Ve = { 0,0,1 };
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/06/08/7A34hnS8xVzfMce.gif" alt="Rotate2" loading="lazy"></figure>
<h2 id="绕任意轴旋转">绕任意轴旋转</h2>
<pre><code class="language-c++">Eigen::Matrix4f get_model_matrix(Vector3f axis, float angle) {
	Eigen::Matrix4f RotateAxis = Eigen::Matrix4f::Identity();
	float radian = angle / 180 * MY_PI;
	float x = axis.x();
	float y = axis.y();
	float z = axis.z();
	float cos_angle = std::cos(radian);
	float sin_angle = std::sin(radian);

	RotateAxis &lt;&lt; x * x + (1 - x * x)*cos_angle, x*y*(1 - cos_angle) + z * sin_angle, x*z*(1 - cos_angle) - y * sin_angle, 0, \
		x*y*(1 - cos_angle) - z * sin_angle, y*y + (1 - y * y)*cos_angle, y*z*(1 - cos_angle) + sin_angle, 0, \
		x*z*(1 - cos_angle) + y * sin_angle, y*z*(1 - cos_angle) - x * sin_angle, z*z + (1 - z * z)*cos_angle, 0, \
		0, 0, 0, 1;

	return RotateAxis;
}
</code></pre>
<h2 id="其他结果">其他结果</h2>
<h3 id="绕x旋转">绕X旋转</h3>
<pre><code class="language-c++">rotateX &lt;&lt; 1, 0, 0, 0,
    0, std::cos(angle), -std::sin(angle), 0,
    0, std::sin(angle), std::cos(angle), 0,
    0, 0, 0, 1;
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/06/08/NifPRGlWwjnJd2b.gif" alt="RotateX" loading="lazy"></figure>
<h3 id="绕y旋转">绕Y旋转</h3>
<pre><code class="language-c++">rotateY &lt;&lt; std::cos(angle), 0, std::sin(angle), 0,
    0, 1, 0, 0,
    -std::sin(angle), 0, std::cos(angle), 0,
    0, 0, 0, 1;
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/06/08/GwD1bHmiSX5QM6q.gif" alt="RotateY" loading="lazy"></figure>
<h3 id="平移-x轴为例">平移 X轴为例</h3>
<pre><code class="language-C++">float step = -angle / 10.0;
translateX &lt;&lt; 1, 0, 0, step,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1;
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/06/08/hONaZsHByKJzFXk.gif" alt="TransX" loading="lazy"></figure>
<h3 id="缩放">缩放</h3>
<pre><code class="language-c++">//scale with k
float k = .1 * angle; //scale factor
scaleK &lt;&lt; k, 0, 0, 0,
    0, k, 0, 0,
    0, 0, k, 0,
    0, 0, 0, 1;
</code></pre>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2021/06/08/cEx8LbiaGXy6HqS.gif" alt="TransX" loading="lazy"></figure>
<p>项目地址 ： <a href="https://github.com/logic-three-body/GameS101_IntroductionTOcomputerGraph/tree/%E4%BD%9C%E4%B8%9A1/Roate_Project">Github</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity技术开放日 北京站]]></title>
        <id>https://logic-three-body.github.io/post/unity-ji-zhu-kai-fang-ri-bei-jing-zhan/</id>
        <link href="https://logic-three-body.github.io/post/unity-ji-zhu-kai-fang-ri-bei-jing-zhan/">
        </link>
        <updated>2021-06-03T04:11:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="unity技术开放日-北京站">Unity技术开放日 北京站</h1>
<h2 id="前言">前言</h2>
<p>unity官方来北京啦，我也是第一次参加这种官方活动，还比较紧张，但是现场气氛相当活泼，讲师大佬们都非常有趣，非常硬核，感觉和看线上直播还是有很大区别，原来官方的讲师大佬如此亲切，就像朋友聊天一样，感觉非常好！这篇博客先来说几个我印象深刻的吧（随着我的学习，也会对这篇博客的内容更新~）</p>
<p><strong>注：本文图片内容主要来源：</strong><a href="https://unity.cn/ask/question/604884f5edbc2a001f945623">官方ppt</a></p>
<h2 id="hdrp打光实践">HDRP打光实践</h2>
<p>我的第一个unity游戏是和小伙伴利用unity3d默认渲染管线制作的，后来也尝试着把场景导入过urp管线，也在urp管线里制作过VR场景，urp和默认渲染管线里的灯光参数比较简洁，但到了hdrp高清渲染关系里就有非常多和物理相关的参数了,所以就要考虑能量、色温等因素。</p>
<p><strong>HDRP中文版文档</strong>：<a href="https://docs.unity3d.com/cn/Packages/com.unity.render-pipelines.high-definition@10.4/manual/index.html">here</a></p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2021/06/03/7NpCJqxzR6skyUh.png" alt="image-20210603105739224" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2021/06/03/GhTzmLiR6dyQow2.png" alt="image-20210603105819020" loading="lazy"></figure>
<p>例如：正午的阳光为11到12万Lux</p>
<p>HDRP反射层级：<br>
HDRP 中提供了一个反射层级来为屏幕上的每个像素提供尽量正确的反射信息。在这个反射层级中包含了三种生成反射的方法，HDRP 进行评估的先后次序为：<br>
1.首先评估 <a href="https://www.bilibili.com/video/BV1YK4y1T7yY?p=9"><strong>Screen Space Reflection</strong></a> （屏幕空间反射，简称 SSR）。<br>
2.如果没有找到合适的反射信息， HDRP 会接着评估 Reflection Probe （反射探针） 。<br>
3.如果还是没有得到合适的反射信息，最后会使用来自天空的反射（ Sky reflection ）。</p>
<p>学习hdrp灯光可以从如下框架入手</p>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2021/06/03/ZQBdCPi5LnEwaXm.png" alt="image-20210603110042629" loading="lazy"></figure>
<p>物理打光和艺术打光配合：</p>
<p>hdrp教程：<a href="https://www.bilibili.com/video/av672487642">实时光追系列</a> <a href="https://www.bilibili.com/video/BV1gE411T7As?p=28">同济动画Unity美术与技术原理</a></p>
<p>screen space reflect原理: <a href="https://www.bilibili.com/video/BV1YK4y1T7yY?p=9">games202Lec09</a></p>
<p>艺术教程：<a href="https://www.bilibili.com/video/av18001896">贵哥汉化色彩与光线</a> <a href="https://www.bilibili.com/video/av35977423">光影色彩理论</a></p>
<figure data-type="image" tabindex="4"><img src="https://i.loli.net/2021/06/03/Fse7WOkf2lU1oB5.png" alt="image-20210603111704467" loading="lazy"></figure>
<h2 id="低成本水体渲染黎明之海">低成本水体渲染&amp;黎明之海</h2>
<p>低成本水体渲染和的黎明之海的技术分享对我很重要，因为最近想和小伙伴们制作有关海洋环保的主题游戏，所以海面以及海底的渲染是我迫切要学习的。</p>
<p>以前对水体渲染有误区，认为水面和水底是一体的，但其实这是两个完全不同的渲染方式，水面渲染相对难度大，包括利用波函数模拟水体流动，从水上看向水底的折射、反色、焦散等效果，水底一般通过后处理模拟水下模糊场景。</p>
<p>水体模拟解决方案框架：</p>
<figure data-type="image" tabindex="5"><img src="https://i.loli.net/2021/06/03/Euo9I3UJSBDYVMO.png" alt="image-20210603113246492" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://i.loli.net/2021/06/03/waY7Sz6mh5nQAcD.png" alt="image-20210603113335476" loading="lazy"></figure>
<p>实时渲染里的水体模拟一般采用波函数模拟动态效果而不采用物理模拟使用的欧拉法或拉格朗日法（因为实在太慢了，伤不起，离线渲染的水和雪的模拟还是让冰雪奇缘类型的电影去用吧）</p>
<p>黎明之海 海洋交互系统：</p>
<figure data-type="image" tabindex="7"><img src="https://i.loli.net/2021/06/03/lcyozZEIMXBJaYv.png" alt="image-20210603114718267" loading="lazy"></figure>
<p>参考：</p>
<p><a href="http://advances.realtimerendering.com/s2019/index.htm">Multi-resolution Ocean Rendering in Crest Ocean System</a></p>
<p><a href="http://advances.realtimerendering.com/s2017/index.html">Crest: Novel Ocean Rendering Techniques in an Open Source Framework</a></p>
<p>对水体模拟的学习，我推荐结合本次技术分享ppt从<a href="https://zhuanlan.zhihu.com/p/95917609">毛星云大佬的文章</a>开始，有一个全局认识，也可以看放牛的星星大佬总结翻译的<a href="https://zhuanlan.zhihu.com/p/196758925">catlikecoding流体模拟系列</a></p>
<h2 id="unity-底层模型之内存">Unity 底层模型之内存</h2>
<p>设计到内存模型的理论确实非常烧脑，不过内存对于正在运行的程序来说非常重要，对内存的优化也是非常复杂的工作</p>
<p>内存是抽象神奇的东西，从物理角度上讲它是一段连续的空间，也就是说在分配内存的时候只看剩余内存大小来分配往往不会获得满意的结果，如果很多小内存片散落在这片内存区域上，即使内存在数值上有很大的剩余也无法再分配一块大的连续内存块了。</p>
<figure data-type="image" tabindex="8"><img src="https://i.loli.net/2021/06/03/rV9fkWlgiYopJND.jpg" alt="" loading="lazy"></figure>
<p>所以一般推荐我们先分配大内存，再分配小内存，避免内存碎片的产生</p>
<p>初学者学习内存我推荐一个超级棒的教程：<a href="https://www.bilibili.com/video/BV1Rb411378V?p=12">CS50</a></p>
<h2 id="后记">后记</h2>
<p>这次活动大开眼界，除了技术干货还有见证了unity背后强大的生态链和业务链，对于引擎背后工具链的熟悉对于开发者也十分重要。</p>
<p>千里之行，始于足下，各位加油！<br>
<img src="https://i.loli.net/2021/06/03/aj6lZKB92rR7Mhd.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>